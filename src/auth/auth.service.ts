// src/auth/auth.service.ts
import {
  Injectable,
  UnauthorizedException,
  BadRequestException,
  InternalServerErrorException,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { UsersService } from '../users/users.service';
import { LoginDto } from './dto/login.dto';
import { ResetPasswordDto } from './dto/reset-password.dto';
import { ChangePasswordDto } from './dto/change-password.dto';
import { v4 as uuidv4 } from 'uuid';
import { MailService } from '../common/services/mail.service';
import { RegisterDto } from './dto/register.dto';
import { User } from 'src/users/entities/user.entity';
import bcrypt from 'bcrypt';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
    private mailService: MailService,
  ) {}

  async login(
    loginDto: LoginDto,
  ): Promise<{ accessToken: string; refreshToken: string; user: any }> {
    const user = await this.usersService.findOneByEmail(loginDto.email);

    if (!user) {
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }

    if (user.isLocked()) {
      throw new UnauthorizedException(
        '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }

    const isPasswordValid = await user.validatePassword(loginDto.password);
    if (!isPasswordValid) {
      await this.usersService.incrementLoginAttempts(user.id);
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }

    await this.usersService.resetLoginAttempts(user.id);

    const payload = { email: user.email, sub: user.id };
    const accessToken = this.jwtService.sign(payload);
    const refreshToken = uuidv4();

    await this.usersService.setRefreshToken(user.id, refreshToken);

    const { password, ...safeUser } = user;
    return {
      accessToken,
      refreshToken,
      user: safeUser,
    };
  }

  async register(registerDto: RegisterDto): Promise<{ message: string }> {
    const { email, password, agencyId } = registerDto;

    // –Ω–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (!email || !email.trim()) {
      throw new BadRequestException('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    if (!/^\S+@\S+\.\S+$/.test(email)) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
    }
    if (!password || password.length < 6) {
      throw new BadRequestException(
        '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤',
      );
    }
    if (!agencyId || agencyId <= 0) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞');
    }

    // üîπ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await this.usersService.findOneByEmail(email);
    if (existingUser) {
      throw new BadRequestException(
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
      );
    }

    // üîπ –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∑–¥–µ—Å—å, –≤ AuthService
    const hashedPassword = await this.hashPassword(password);

    let user: User;
    try {
      // –ü–µ—Ä–µ–¥–∞—ë–º —É–∂–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
      user = await this.usersService.registerMinimalUser(
        email,
        hashedPassword, // ‚Üê —É–∂–µ —Ö–µ—à!
        agencyId,
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);

      // –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –ë–î (PostgreSQL)
      if (error?.code === '23502') {
        // NOT NULL violation
        throw new BadRequestException('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      }
      if (error?.code === '23505') {
        // Unique violation
        throw new BadRequestException(
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        );
      }

      throw new InternalServerErrorException('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // üîπ 4. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –û—Ç–ø—Ä–∞–≤–∫–∞ email –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    try {
      await this.mailService.sendRegistrationEmail(email); // ‚Üê –±–µ–∑ –ø–∞—Ä–æ–ª—è!
    } catch (mailError) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞:', mailError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
    }

    return {
      message:
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
    };
  }

  async refreshToken(
    refreshToken: string,
  ): Promise<{ accessToken: string; refreshToken: string }> {
    const user = await this.usersService.findOneByRefreshToken(refreshToken);
    if (!user) {
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π refresh token');
    }

    const payload = { email: user.email, sub: user.id };
    const newAccessToken = this.jwtService.sign(payload);
    const newRefreshToken = uuidv4();

    await this.usersService.setRefreshToken(user.id, newRefreshToken);

    return {
      accessToken: newAccessToken,
      refreshToken: newRefreshToken,
    };
  }

  async forgotPassword(email: string): Promise<{ message: string }> {
    const resetCode = await this.usersService.generatePasswordResetCode(email);
    if (resetCode) {
      await this.mailService.sendPasswordResetEmail(email, resetCode);
    }
    // –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ email
    return { message: '–ï—Å–ª–∏ email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' };
  }

  async resetPassword(
    resetPasswordDto: ResetPasswordDto,
  ): Promise<{ message: string }> {
    const { email, code, newPassword } = resetPasswordDto;
    await this.usersService.resetPasswordWithCode(email, code, newPassword);
    return { message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' };
  }

  async changePassword(
    userId: number,
    changePasswordDto: ChangePasswordDto,
  ): Promise<{ message: string }> {
    const isValid = await this.usersService.validatePassword(
      userId,
      changePasswordDto.currentPassword,
    );
    if (!isValid) {
      throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
    }

    await this.usersService.updatePassword(
      userId,
      changePasswordDto.newPassword,
    );
    return { message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' };
  }

  async logout(userId: number): Promise<{ message: string }> {
    await this.usersService.clearRefreshToken(userId);
    return { message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' };
  }

  private async hashPassword(password: string): Promise<string> {
    return await bcrypt.hash(password, 10);
  }
}
