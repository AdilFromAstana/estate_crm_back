// src/flat-security/flat-security.service.ts
import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { FlatSecurity } from './entities/flat-security.entity';
import { CreateFlatSecurityDto } from './dto/create-flat-security.dto';

@Injectable()
export class FlatSecurityService {
  constructor(
    @InjectRepository(FlatSecurity)
    private repo: Repository<FlatSecurity>,
  ) {}

  // üå± Bulk seed ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–∑ HTML-—Ñ–æ—Ä–º—ã
  async seed(): Promise<void> {
    const items = [
      { code: 'window_grates', id: '1', name: '—Ä–µ—à–µ—Ç–∫–∏ –Ω–∞ –æ–∫–Ω–∞—Ö' },
      { code: 'security', id: '2', name: '–æ—Ö—Ä–∞–Ω–∞' },
      { code: 'intercom', id: '3', name: '–¥–æ–º–æ—Ñ–æ–Ω' },
      { code: 'code_lock', id: '4', name: '–∫–æ–¥–æ–≤—ã–π –∑–∞–º–æ–∫' },
      { code: 'alarm', id: '5', name: '—Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è' },
      { code: 'video_surveillance', id: '6', name: '–≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ' },
      { code: 'video_intercom', id: '7', name: '–≤–∏–¥–µ–æ–¥–æ–º–æ—Ñ–æ–Ω' },
      { code: 'concierge', id: '8', name: '–∫–æ–Ω—Å—å–µ—Ä–∂' },
    ];

    // –û—á–∏—Å—Ç–∏—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
    await this.repo.clear();
    await this.repo.save(items);
  }

  // ‚ûï –°–æ–∑–¥–∞—Ç—å
  async create(dto: CreateFlatSecurityDto): Promise<FlatSecurity> {
    const item = this.repo.create(dto);
    return this.repo.save(item);
  }

  // üîç –ù–∞–π—Ç–∏ –≤—Å–µ
  async findAll(): Promise<FlatSecurity[]> {
    return this.repo.find();
  }

  // üîé –ù–∞–π—Ç–∏ –ø–æ code
  async findOne(code: string): Promise<FlatSecurity> {
    const item = await this.repo.findOneBy({ code });
    if (!item) {
      throw new NotFoundException(`FlatSecurity with code "${code}" not found`);
    }
    return item;
  }

  // ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø–æ code
  async update(
    code: string,
    dto: Partial<CreateFlatSecurityDto>,
  ): Promise<FlatSecurity> {
    const item = await this.findOne(code);
    Object.assign(item, dto);
    return this.repo.save(item);
  }

  // üóë –£–¥–∞–ª–∏—Ç—å –ø–æ code
  async delete(code: string): Promise<void> {
    const result = await this.repo.delete({ code });
    if (result.affected === 0) {
      throw new NotFoundException(`FlatSecurity with code "${code}" not found`);
    }
  }
}
