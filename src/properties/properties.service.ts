// src/properties/properties.service.ts
import {
  Injectable,
  BadRequestException,
  ForbiddenException,
  NotFoundException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Brackets, In } from 'typeorm';
import { Property } from './entities/property.entity';
import { CreatePropertyDto } from './dto/create-property.dto';
import { UpdatePropertyDto } from './dto/update-property.dto';
import { GetPropertiesDto } from './dto/get-properties.dto';
import { User } from '../users/entities/user.entity';
import { UserRole } from '../common/enums/user-role.enum';
import { PropertyStatus } from '../common/enums/property-status.enum';
import { PropertyTag } from 'src/common/enums/property-tag.enum';
import * as puppeteer from 'puppeteer';
import { ParsePageDto } from './dto/parse-page.dto';

@Injectable()
export class PropertiesService {
  constructor(
    @InjectRepository(Property)
    private propertiesRepository: Repository<Property>,
  ) {}

  async create(
    createPropertyDto: CreatePropertyDto,
    user: User,
  ): Promise<Property> {
    const {
      buildingType: buildingTypeArray,
      condition: conditionArray,
      ...rest
    } = createPropertyDto;

    const buildingType = Array.isArray(buildingTypeArray)
      ? buildingTypeArray[0]
      : buildingTypeArray;

    const condition = Array.isArray(conditionArray)
      ? conditionArray[0]
      : conditionArray;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!this.canCreateProperty(user)) {
      throw new ForbiddenException('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (!user.agencyId) {
      throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    }

    const property = this.propertiesRepository.create({
      ...rest,
      buildingType, // ‚Üê –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
      condition, // ‚Üê –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
      ownerId: user.id,
      agencyId: user.agencyId,
      currency: createPropertyDto.currency || 'KZT',
      isPublished: true, // –∏–ª–∏ true –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    });

    return this.propertiesRepository.save(property);
  }

  async findAll(query: GetPropertiesDto, user: User | null): Promise<any> {
    const {
      page = 1,
      limit = 10,
      search,
      type,
      status,
      tags,
      cityId,
      districtId,
      minPrice,
      maxPrice,
      minFloor,
      maxFloor,
      minArea,
      maxArea,
      rooms,
      isPublished,
      agencyId,
      ownerId,
      buildingType,
      condition,
      sortBy = 'createdAt',
      sortOrder = 'DESC',
    } = query;

    const skip = (page - 1) * limit;

    const queryBuilder = this.propertiesRepository
      .createQueryBuilder('property')
      .leftJoinAndSelect('property.owner', 'owner')
      .leftJoinAndSelect('property.agency', 'agency');

    // üîë –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–æ–ª—è–º
    if (!user) {
      queryBuilder.andWhere('property.isPublished = true');
    }

    // üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    if (search) {
      queryBuilder.andWhere(
        new Brackets((qb) => {
          qb.where('property.title ILIKE :search', { search: `%${search}%` })
            .orWhere('property.description ILIKE :search', {
              search: `%${search}%`,
            })
            .orWhere('property.city ILIKE :search', { search: `%${search}%` })
            .orWhere('property.district ILIKE :search', {
              search: `%${search}%`,
            })
            .orWhere('property.address ILIKE :search', {
              search: `%${search}%`,
            });
        }),
      );
    }

    // üß© –§–∏–ª—å—Ç—Ä—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
    if (type) {
      queryBuilder.andWhere('property.type = :type', { type });
    }

    if (status) {
      queryBuilder.andWhere('property.status = :status', { status });
    }

    if (tags && tags.length > 0) {
      queryBuilder.andWhere('property.tags && :tags', { tags });
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ ID –≥–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω–∞
    if (cityId !== undefined) {
      queryBuilder.andWhere('property.cityId = :cityId', { cityId });
    }

    if (districtId !== undefined) {
      queryBuilder.andWhere('property.districtId = :districtId', {
        districtId,
      });
    }

    if (minPrice !== undefined) {
      queryBuilder.andWhere('property.price >= :minPrice', { minPrice });
    }

    if (maxPrice !== undefined) {
      queryBuilder.andWhere('property.price <= :maxPrice', { maxPrice });
    }

    if (minArea !== undefined) {
      queryBuilder.andWhere('property.area >= :minArea', { minArea });
    }

    if (maxArea !== undefined) {
      queryBuilder.andWhere('property.area <= :maxArea', { maxArea });
    }

    if (minFloor !== undefined) {
      queryBuilder.andWhere('property.floor >= :minFloor', { minFloor });
    }
    if (maxFloor !== undefined) {
      queryBuilder.andWhere('property.floor <= :maxFloor', { maxFloor });
    }

    if (buildingType && buildingType.length > 0) {
      queryBuilder.andWhere('property.buildingType IN (:...buildingType)', {
        buildingType,
      });
    }

    if (condition && condition.length > 0) {
      queryBuilder.andWhere('property.condition IN (:...condition)', {
        condition,
      });
    }

    if (rooms !== undefined) {
      queryBuilder.andWhere('property.rooms = :rooms', { rooms });
    }

    // ‚ö†Ô∏è –í–∞–∂–Ω–æ: –¥–ª—è –≥–æ—Å—Ç–µ–π –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º isPublished=false, –Ω–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º
    if (user) {
      if (isPublished !== undefined) {
        queryBuilder.andWhere('property.isPublished = :isPublished', {
          isPublished,
        });
      }
    }

    // üîí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    if (agencyId) {
      // –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ª—é–±–æ–º—É agencyId
      // –†–∏–µ–ª—Ç–æ—Ä ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ —Å–≤–æ–µ–º—É (–Ω–æ –≤—ã—à–µ —É–∂–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ)
      queryBuilder.andWhere('property.agencyId = :agencyId', { agencyId });
    }

    if (ownerId) {
      queryBuilder.andWhere('property.ownerId = :ownerId', { ownerId });
    }

    // üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const allowedSortFields = ['price', 'area', 'createdAt'];
    const sortField = allowedSortFields.includes(sortBy) ? sortBy : 'createdAt';
    queryBuilder.orderBy(`property.${sortField}`, sortOrder);

    const [data, total] = await queryBuilder
      .skip(skip)
      .take(limit)
      .getManyAndCount();

    return {
      data,
      page,
      limit,
      total,
      totalPages: Math.ceil(total / limit),
    };
  }

  async findByIds(ids: number[]) {
    if (!ids || ids.length === 0) return [];
    return this.propertiesRepository.findBy({ id: In(ids) });
  }

  async findOne(id: number, user: User | null): Promise<Property> {
    const property = await this.propertiesRepository.findOne({
      where: { id },
      relations: ['owner', 'agency'],
    });

    if (!property) {
      throw new NotFoundException('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    return property;
  }

  async update(
    id: number,
    updatePropertyDto: UpdatePropertyDto,
    user: User,
  ): Promise<Property> {
    const property = await this.findOne(id, user);

    Object.assign(property, updatePropertyDto);
    return this.propertiesRepository.save(property);
  }

  async remove(id: number, user: User): Promise<void> {
    const property = await this.findOne(id, user);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    if (!this.canDeleteProperty(property, user)) {
      throw new ForbiddenException(
        '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
      );
    }

    await this.propertiesRepository.remove(property);
  }

  // –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  private canCreateProperty(user: User): boolean {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –≤–æ–æ–±—â–µ user
    if (!user) {
      throw new ForbiddenException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID
    if (!user.id) {
      throw new ForbiddenException(
        '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID',
      );
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —Ä–æ–ª–∏
    if (!user.roles) {
      throw new ForbiddenException(
        `–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${user.id}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
      );
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ä–æ–ª—å
    if (user.roles.length === 0) {
      throw new ForbiddenException(
        `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${user.id} –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
      );
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–∞—è —Ä–æ–ª—å
    const allowedRoles = [
      UserRole.AGENCY_ADMIN,
      UserRole.REALTOR,
      UserRole.MANAGER,
    ];
    const hasAllowedRole = user.roles.some((role) => {
      if (!role || !role.name) {
        console.warn(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${user.id}`, role);
        return false;
      }
      return allowedRoles.includes(role.name as UserRole);
    });

    if (!hasAllowedRole) {
      const userRoles = user.roles.map((r) => r.name).join(', ');
      throw new ForbiddenException(
        `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${user.id} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. ` +
          `–í–∞—à–∏ —Ä–æ–ª–∏: [${userRoles}]. ` +
          `–¢—Ä–µ–±—É—é—Ç—Å—è —Ä–æ–ª–∏: [${allowedRoles.join(', ')}].`,
      );
    }

    return true;
  }

  private canViewAllProperties(user: User | null): boolean {
    if (!user || !user.roles || user.roles.length === 0) {
      return false;
    }
    return user.roles.some((role) =>
      [UserRole.ADMIN, UserRole.AGENCY_ADMIN].includes(role.name as UserRole),
    );
  }

  private canViewProperty(property: Property, user: User): boolean {
    if (this.canViewAllProperties(user)) return true;
    return property.agencyId === user.agencyId;
  }

  private canEditProperty(property: Property, user: User): boolean {
    if (user.roles.some((role) => role.name === UserRole.ADMIN)) return true;
    if (user.roles.some((role) => role.name === UserRole.AGENCY_ADMIN))
      return property.agencyId === user.agencyId;
    return property.ownerId === user.id;
  }

  private canDeleteProperty(property: Property, user: User): boolean {
    return this.canEditProperty(property, user);
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  async updateStatus(
    id: number,
    status: PropertyStatus,
    user: User,
  ): Promise<Property> {
    console.log('user: ', user);
    const property = await this.findOne(id, user);

    if (!this.canEditProperty(property, user)) {
      throw new ForbiddenException(
        '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
      );
    }

    property.status = status;
    return this.propertiesRepository.save(property);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–≥–∞–º–∏
  async addTag(id: number, tag: PropertyTag, user: User): Promise<Property> {
    const property = await this.findOne(id, user);

    if (!this.canEditProperty(property, user)) {
      throw new ForbiddenException(
        '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞ —ç—Ç–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
      );
    }

    if (!property.tags) {
      property.tags = [];
    }

    if (!property.tags.includes(tag)) {
      property.tags.push(tag);
      return this.propertiesRepository.save(property);
    }

    return property;
  }

  async removeTag(id: number, tag: PropertyTag, user: User): Promise<Property> {
    const property = await this.findOne(id, user);

    if (!this.canEditProperty(property, user)) {
      throw new ForbiddenException(
        '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞ —ç—Ç–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
      );
    }

    if (property.tags && property.tags.includes(tag)) {
      property.tags = property.tags.filter((t) => t !== tag);
      return this.propertiesRepository.save(property);
    }

    return property;
  }

  async parsePage(parsePageDto: ParsePageDto): Promise<any> {
    const { url } = parsePageDto;

    if (!url.includes('krisha.kz')) {
      throw new BadRequestException('URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å —Å–∞–π—Ç–∞ krisha.kz');
    }

    const browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
      ],
    });

    const page = await browser.newPage();

    try {
      console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);
      await page.goto(url, { waitUntil: 'networkidle2', timeout: 60000 });

      console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...');

      await Promise.all([
        page.waitForSelector('.layout__content .offer__container', {
          timeout: 30000,
        }),
        page.waitForSelector('.layout__content .offer__advert-title', {
          timeout: 30000,
        }),
      ]);
      console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω—ã.');

      await new Promise((resolve) => setTimeout(resolve, 2000));

      const data = await page.evaluate(() => {
        // --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–Ω—É—Ç—Ä–∏ page.evaluate ---
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ page.evaluate –∏ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ window.*

        const safeTextContent = (
          selector: string,
          root: Element | Document = document,
        ): string => {
          const element = root.querySelector(selector);
          return element ? element.textContent?.trim() || '' : '';
        };

        // --- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
        const rawTitle = safeTextContent('.offer__advert-title h1');
        const priceRaw = safeTextContent('.offer__price');
        const addressRaw = safeTextContent('.offer__location');
        const cityAndDistrictRaw =
          addressRaw.split('\n')[0]?.trim() || addressRaw;
        const cityAndDistrictParts = cityAndDistrictRaw
          .split(',')
          .map((part) => part.trim())
          .filter((part) => part.length > 0);
        const cityFromLocation = cityAndDistrictParts[0] || '';
        const districtFromLocation = cityAndDistrictParts[1] || '';

        // --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ---
        let title = rawTitle;
        let roomsFromTitle = '';
        let floorFromTitle = '';
        let totalFloorsFromTitle = '';
        let areaFromTitle = '';

        if (rawTitle) {
          const roomsMatch = rawTitle.match(/^(\d+)-–∫–æ–º–Ω–∞—Ç–Ω–∞—è/);
          if (roomsMatch) {
            roomsFromTitle = roomsMatch[1];
          }

          const areaMatch = rawTitle.match(/¬∑\s*([\d.,]+)\s*–º¬≤/);
          if (areaMatch) {
            areaFromTitle = areaMatch[1].replace(',', '.');
          }

          const floorMatch = rawTitle.match(/¬∑\s*(\d+)\/(\d+)\s*—ç—Ç–∞–∂/);
          if (floorMatch) {
            floorFromTitle = floorMatch[1];
            totalFloorsFromTitle = floorMatch[2];
          }
        }

        // --- –ü–∞—Ä—Å–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—É–ª–∏—Ü–∞ –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞) ---
        let street = '';
        let houseNumber = '';

        if (rawTitle) {
          const addressPartMatch = rawTitle.match(/¬∑\s*([^¬∑]+)$/);
          if (addressPartMatch) {
            let addressPart = addressPartMatch[1].trim();
            addressPart = addressPart.replace(/\s*–∑–∞\s*~.*$/, '').trim();
            addressPart = addressPart
              .replace(/[\d.,]+\s*–º¬≤\s*,?\s*/i, '')
              .trim();

            const addressParts = addressPart
              .split(',')
              .map((part) => part.trim())
              .filter((part) => part.length > 0);

            if (addressParts.length > 0) {
              const lastPart = addressParts[addressParts.length - 1];

              const houseNumberMatch = lastPart.match(/^(.*?)\s+([\d\/\-]+)$/);
              if (houseNumberMatch) {
                street = houseNumberMatch[1].trim();
                houseNumber = houseNumberMatch[2].trim();
              } else {
                const isAllNumber = /^[\d\/\-]+$/.test(lastPart);
                if (isAllNumber) {
                  houseNumber = lastPart;
                  if (addressParts.length > 1) {
                    street = addressParts
                      .slice(0, addressParts.length - 1)
                      .join(', ');
                  }
                } else {
                  street = lastPart;
                }
              }

              if (!street && addressParts.length > 1) {
                street = addressParts
                  .slice(0, addressParts.length - 1)
                  .join(', ');
              } else if (!street && addressParts.length === 1 && !houseNumber) {
                street = addressParts[0];
              }

              if (street) {
                street = street
                  .replace(
                    /^(—É–ª\.?|—É–ª–∏—Ü–∞|–ø—Ä–æ—Å–ø–µ–∫—Ç|–ø—Ä–æ—Å–ø\.?|–ø—Ä-—Ç|–ø—Ä-–∫—Ç|–ø–µ—Ä\.?|–ø–µ—Ä–µ—É–ª–æ–∫|–±—É–ª—å–≤–∞—Ä|–±—É–ª\.?|—à–æ—Å—Å–µ|—à\.?|–∞–ª–ª–µ—è|–∞–ª\.?|–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω|–º–∫—Ä–Ω?\.?|–∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å|–∂–∫)/i,
                    '',
                  )
                  .trim();
              }
            }
          }
        }

        // --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã ---
        const parameters: Record<string, string> = {};

        // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .offer__short-description
        const shortParamElements = document.querySelectorAll(
          '.offer__short-description .offer__info-item',
        );
        shortParamElements.forEach((item) => {
          const dt = item.querySelector('.offer__info-title');
          const dd = item.querySelector('.offer__advert-short-info');
          if (dt && dd) {
            const key = dt.textContent?.trim() || '';
            const ddContent = dd.textContent?.trim() || '';
            const ddLink = dd.querySelector('a');
            const value = ddLink
              ? ddLink.textContent?.trim() || ddContent
              : ddContent;

            const dataName = item.getAttribute('data-name') || key;
            parameters[dataName] = value;
          }
        });

        // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .offer__parameters
        const detailedParamElements = document.querySelectorAll(
          '.offer__parameters dl',
        );
        detailedParamElements.forEach((dl) => {
          const dt = dl.querySelector('dt');
          const dd = dl.querySelector('dd');
          if (dt && dd) {
            const key = dt.textContent?.trim() || '';
            const dataName = dt.getAttribute('data-name') || key;
            const value = dd.textContent?.trim() || '';
            parameters[dataName] = value;
          }
        });

        // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
        const buildingType = parameters['flat.building'] || '';
        const complex = parameters['map.complex'] || '';
        const yearBuilt = parameters['house.year'] || '';

        const areaFull = parameters['live.square'] || '';
        let area = '';
        let kitchenArea = '';
        if (areaFull) {
          const areaMatch = areaFull.match(/^([\d.,\s]+)/);
          if (areaMatch) {
            area = areaMatch[1].replace(/[^\d.,]/g, '').replace(',', '.');
          }
          const kitchenMatch = areaFull.match(
            /–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏\s*‚Äî\s*([\d.,\s]+)\s*–º¬≤/,
          );
          if (kitchenMatch) {
            kitchenArea = kitchenMatch[1]
              .replace(/[^\d.,]/g, '')
              .replace(',', '.');
          }
        }
        if (!area && areaFromTitle) {
          area = areaFromTitle;
        }

        const roomsParam = (
          parameters['live.rooms'] ||
          parameters['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç'] ||
          ''
        ).replace(/\D/g, '');
        const rooms = roomsFromTitle || roomsParam;

        let floorInfo = '';
        let floor = '';
        let totalFloors = '';
        if (floorFromTitle && totalFloorsFromTitle) {
          floorInfo = `${floorFromTitle} –∏–∑ ${totalFloorsFromTitle}`;
          floor = floorFromTitle;
          totalFloors = totalFloorsFromTitle;
        } else {
          floorInfo = parameters['flat.floor'] || '';
          const floorParamMatch = floorInfo.match(/^(\d+)\s+–∏–∑\s+(\d+)$/);
          if (floorParamMatch) {
            floor = floorParamMatch[1];
            totalFloors = floorParamMatch[2];
          }
        }

        const condition = parameters['flat.renovation'] || '';
        const bathroom = parameters['flat.toilet'] || '';
        const balcony = parameters['flat.balcony'] || '';
        const parking = parameters['flat.parking'] || '';
        const furniture = parameters['live.furniture'] || '';

        // --- –û–ø–∏—Å–∞–Ω–∏–µ ---
        const description =
          safeTextContent('.offer__description .text') ||
          safeTextContent('.a-description__text');

        // --- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
        const imageUrls: string[] = [];
        const galleryItems = document.querySelectorAll('.gallery__small-item');
        galleryItems.forEach((item) => {
          let imgUrl = item.getAttribute('data-photo-url');
          if (!imgUrl) {
            const sourceWebp = item.querySelector('source[type="image/webp"]');
            if (sourceWebp) {
              const srcset = sourceWebp.getAttribute('srcset') || '';
              imgUrl = srcset.split(' ')[0];
            }
            if (!imgUrl) {
              const img = item.querySelector('img');
              imgUrl = (img as HTMLImageElement)?.src || '';
            }
          }
          if (imgUrl && !imageUrls.includes(imgUrl)) {
            imageUrls.push(imgUrl);
          }
        });

        if (imageUrls.length === 0) {
          const mainPhotoImg = document.querySelector('.gallery__main img');
          const mainPhotoUrl = (mainPhotoImg as HTMLImageElement)?.src;
          if (mainPhotoUrl) {
            imageUrls.push(mainPhotoUrl);
          }
        }

        // --- –¶–µ–Ω–∞ ---
        let price = '';
        let currency = '';
        if (priceRaw) {
          const match = priceRaw.match(/^([\d\s.,]+)\s*([^\d\s]*)/);
          if (match) {
            price = match[1].replace(/\s/g, '');
            currency = match[2] || '‚Ç∏';
          } else {
            price = priceRaw.replace(/[^\d]/g, '');
          }
        }

        return {
          title,
          price,
          currency,
          address: addressRaw,
          city: cityFromLocation,
          district: districtFromLocation,
          street,
          houseNumber,
          area,
          kitchenArea,
          rooms,
          floorInfo,
          floor,
          totalFloors,
          buildingType,
          yearBuilt,
          condition,
          bathroom,
          balcony,
          parking,
          furniture,
          complex,
          description,
          photos: imageUrls,
          sourceUrl: window.location.href,
        };
      });

      await browser.close();
      console.log('–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.');
      return data;
    } catch (error) {
      if (browser) {
        await browser.close();
      }
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      if (error.name === 'TimeoutError') {
        throw new BadRequestException(`–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${url}`);
      }
      throw new BadRequestException(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`,
      );
    }
  }
}
