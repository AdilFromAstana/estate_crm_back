// src/users/entities/user.entity.ts
import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  JoinTable,
  ManyToMany,
  BeforeInsert,
  BeforeUpdate,
  Relation,
  JoinColumn,
} from 'typeorm';
import { Agency } from '../../agencies/entities/agency.entity';
import { Role } from './role.entity';
import * as bcrypt from 'bcrypt';
import { ApiProperty } from '@nestjs/swagger';

@Entity()
export class User {
  @ApiProperty({ example: 1, description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä' })
  @PrimaryGeneratedColumn()
  id: number;

  @ApiProperty({
    example: 'user@example.com',
    description: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  })
  @Column({ unique: true })
  email: string;

  @Column()
  password: string;

  @ApiProperty({
    example: '–ò–≤–∞–Ω',
    description: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    required: false,
  })
  @Column({ type: 'varchar', nullable: true })
  firstName: string;

  @ApiProperty({
    example: '–ò–≤–∞–Ω–æ–≤',
    description: '–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    required: false,
  })
  @Column({ type: 'varchar', nullable: true })
  lastName: string;

  @ApiProperty({
    example: '–ò–≤–∞–Ω–æ–≤–∏—á',
    description: '–û—Ç—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    required: false,
  })
  @Column({ type: 'varchar', nullable: true })
  middleName: string;

  @ApiProperty({
    example: '+7 (701) 123-45-67',
    description: '–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    required: false,
  })
  @Column({ type: 'varchar', nullable: true })
  phone: string;

  @ApiProperty({
    example: 'https://example.com/avatar.jpg',
    description: 'URL –∞–≤–∞—Ç–∞—Ä–∞',
    required: false,
  })
  @Column({ type: 'varchar', nullable: true })
  avatar: string;

  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
  @ApiProperty({
    example: 'https://instagram.com/realtor_ivanov',
    description: 'Instagram —Ä–∏—ç–ª—Ç–æ—Ä–∞',
    required: false,
  })
  @Column({ nullable: true })
  instagram: string;

  @ApiProperty({
    example: 'https://tiktok.com/@realtor_ivanov',
    description: 'TikTok —Ä–∏—ç–ª—Ç–æ—Ä–∞',
    required: false,
  })
  @Column({ nullable: true })
  tiktok: string;

  @ManyToOne(() => Agency, (agency) => agency.users, {
    nullable: true,
    onDelete: 'SET NULL',
  })
  @JoinColumn({ name: 'agencyId' }) // ‚Üê —É–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞
  agency: Agency;

  // –Ø–≤–Ω–æ –æ–±—ä—è–≤–ª—è–µ–º ID –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —É–¥–æ–±–Ω–æ)
  @Column({ nullable: true })
  agencyId: number;

  @ManyToMany(() => Role)
  @JoinTable()
  roles: Role[];

  @ApiProperty({
    example: 'RL-123456',
    description: '–ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏',
    required: false,
  })
  @Column({ nullable: true })
  licenseNumber: string;

  @ApiProperty({
    example: '2025-12-31T00:00:00.000Z',
    description: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏',
    required: false,
  })
  @Column({ type: 'timestamp', nullable: true })
  licenseExpiry: Date;

  @ApiProperty({ example: false, description: '–ù–∞–ª–∏—á–∏–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏' })
  @Column({ default: false })
  isLicensed: boolean;

  @ApiProperty({ example: true, description: '–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' })
  @Column({ default: true })
  isActive: boolean;

  @ApiProperty({ example: false, description: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ email' })
  @Column({ default: false })
  isVerified: boolean;

  @ApiProperty({
    example: '2023-01-01T00:00:00.000Z',
    description: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
  })
  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })
  createdAt: Date;

  @ApiProperty({
    example: '2023-01-01T00:00:00.000Z',
    description: '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
  })
  @Column({
    type: 'timestamp',
    default: () => 'CURRENT_TIMESTAMP',
    onUpdate: 'CURRENT_TIMESTAMP',
  })
  updatedAt: Date;

  @Column({ nullable: true })
  refreshToken: string;

  @Column({ nullable: true })
  passwordResetToken: string;

  @Column({ type: 'timestamp', nullable: true })
  passwordResetExpires: Date;

  @Column({ default: 0 })
  loginAttempts: number;

  @Column({ type: 'timestamp', nullable: true })
  lockUntil: Date; // üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–∏–ø

  @Column({ type: 'timestamp', nullable: true })
  deletedAt?: Date;

  @BeforeInsert()
  @BeforeUpdate()
  async hashPassword() {
    if (this.password && !this.password.startsWith('$2b$')) {
      this.password = await bcrypt.hash(this.password, 10);
    }
  }

  async validatePassword(password: string): Promise<boolean> {
    return bcrypt.compare(password, this.password);
  }

  isLocked(): boolean {
    return !!this.lockUntil && this.lockUntil > new Date();
  }

  incrementLoginAttempts(): void {
    this.loginAttempts += 1;
    if (this.loginAttempts >= 5) {
      this.lockUntil = new Date(Date.now() + 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
    }
  }

  resetLoginAttempts(): void {
    this.loginAttempts = 0;
    this.lockUntil = null as any; // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø
  }
}
